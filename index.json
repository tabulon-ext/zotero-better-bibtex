[
{
	"uri": "/zotero-better-bibtex/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Install by downloading the latest release \u0026ndash; if you use Firefox, make sure to right-click and save the XPI file, not just clicking it \u0026ndash; and then in Zotero:\n In the main menu go to Tools \u0026gt; Add-ons Select \u0026lsquo;Extensions\u0026rsquo; Click on the gear in the top-right corner and choose \u0026lsquo;Install Add-on From File\u0026hellip;\u0026rsquo; Choose .xpi that you\u0026rsquo;ve just downloaded, click \u0026lsquo;Install\u0026rsquo; Restart Zotero  After the initial installation, the plugin will auto-update to newer releases, so you should need to perform the process described here only once.\nNote: the default setting of BBT will generate different citekeys than Zotero would itself generate; the keys from Zotero are not always safe for use in bibtex/biber. If you want to get the stock zotero keys, set the pattern in the preferences to [zotero]. I very much recommend not choosing [zotero] as your pattern unless you have existing articles that use keys generated by previous Zotero-native BibTeX export.\nNote: BBT needs to be installed in Zotero, not Firefox. There used to be two versions of Zotero, one standalone, and one that was installed in Firefox. BBT is a Zotero extension and lives where Zotero lives; Zotero is no longer available as a Firefox plugin, only as standalone.\nOn first install you will be asked a few questions. Please read these instead of just clicking through.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/",
	"title": "Exporting items",
	"tags": ["export", "scripting"],
	"description": "",
	"content": "Better BibTex adds a couple of export formats to Zotero\u0026rsquo;s export dialog and several ways to improve export for plaintext-based authoring. The Better BibTeX configuration pane can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo; where you can tweak the exports, such as\n Omitting fields from exports to slim down your bib files. Configuring how citation keys are generated. And really a ton more.  Additionally you can automate exporting (parts of) your library either using auto-export or pull export.\nPinning (fixing) the citation key By default, BBT will generate citation keys from your items using the formatting pattern you specified. If you want the key to be stable even when you change the item, you can fix its citation key to a value of your choosing by adding the text Citation Key: [your citekey] on a line of its own in the extra field of the item.\nAdd your own BibLaTeX fields LaTeX fields You can add your own fields to the export which are not derived from regular Zotero item fields by adding them in the extra field:\neither by using lines such as\ntex.origdate= 1856 tex.origtitle= All This \u0026amp; More or\ntex.origdate: 1856 tex.origtitle: All This \u0026amp; More The difference between lines with an = or an : is that the fields marked with = are considered to be valid (\u0026ldquo;raw\u0026rdquo;) latex and will be passed on into the generated files as-is. The lines marked with : are assumed to be plain-text and LaTeX special characters (such as the \u0026amp; above) will be escaped.\nCSL fields The final way to add fields is by using CSL fields in the format {:original-date: 1856} or Original Date: 1856 on a line of its own. These fields will not only be exported to Bib(La)TeX, but will also be picked up by the Zotero Bibliography manager, even though not all Zotero styles yet support this.\nNote that the default biblatex styles do not seem to support origdate; you can find possible solutions for this at Stack Exchange here and here.\nChanging the exported reference type If you add a field called tex.referencetype, the value of that field value will be used as the reference type instead of the one usually inferred from the Zotero reference type. You can use this to create, for example, @customa{citekeyhere, ....} type references.\nBackground exports To help out with larger libraries, BBT will export using an isolated thread (\u0026ldquo;worker thread\u0026rdquo;), which will prevent Zotero from locking up during exports. This was introduced in 5.2.0; at time of writing it passes all tests, and feedback so far has been positive, but it\u0026rsquo;s a wild departure from how Zotero exports work, so I consider it experimental at this stage. If you are experiencing errors,\n please do report them, and you can (temporarily I hope) disable by going into the BBT advanced preferences and drag the parallel exports slider to 0.  If BBT detects an error during background exports, it will disabled them, so that subsequent exports will be foreground exports. You can re-enable them using the same slider by dragging it back to the default 1.\n"
},
{
	"uri": "/zotero-better-bibtex/citing/",
	"title": "Citation Keys",
	"tags": ["citation keys"],
	"description": "",
	"content": "Generating citekeys for your references The BibTeX citations keys generated by the standard Zotero exporters are always generated at time of export, using an algorithm that usually generates unique keys. For serious LaTeX users, \u0026ldquo;usually\u0026rdquo; presents the following problems:\n If a non-unique key is generated, which one gets postfixed with a distinguishing character is essentially non-deterministic. The keys are always auto-generated, so if you correct a typo in the author name or title, the key will change You can\u0026rsquo;t see the citation keys until you export them  For a LaTeX author, the citation keys have their own meaning, fully separate from the other reference data, even if people usually pick a naming scheme related to them. As the citation key is the piece of data that connects your bibliography, this is a piece of data you want to have control over. BBT offers you this control:\n Stable citation keys, without key clashes. BBT generates citation keys that take into account other existing keys in your library in a deterministic way, regardless of what part of your library you export, or the order in which you do it. BBT is conservative about citation key changes, and allows you to fix keys to any value of your choosing. Generate citation keys from JabRef(-ish) patterns.  You can also\n Drag and drop LaTeX citations using these keys to your favorite LaTeX editor Show your citation keys in the reference list view.  Set your own, fixed citation keys By default, BBT generates the citation key from the item information, and this key may change when you edit the item. Such keys are called dynamic keys, which are marked with an asterisk (*) in the reference list view, and are displayed in italics in the item details.\nYou can fix the citation key (called pinning in BBT) for an item by adding the text Citation Key: [your citekey] anywhere in the extra field of the reference on a line of its own. You can generate a pinned citation key by selecting one or more items, right-clicking, and selecting Generate BibTeX key, which will add the current citation key to the extra field, thereby pinning it. These keys are shown without the asterisk (*) marker in the middle column, and non-italicized in the details view, to distinguish them from dynamic keys.\nDrag and drop/hotkey citations You can drag and drop citations into your LaTeX/Markdown/Orgmode editor, and it will add a proper \\cite{citekey}/[@citekey]/[[zotero://select...][@citekey]. The cite command is configurable for LaTeX by setting the config option in the preferences. Do not include the leading backslash. This feature requires a one-time setup: go to Zotero preferences, tab Export, under Default Output Format, select \u0026ldquo;Better BibTeX Quick Copy\u0026rdquo;, and choose the Quick Copy format under the Citation keys preferences for BBT.\nFind duplicate keys through integration with Report Customizer The plugin will generate BibTeX comments to show whether a key conflicts and with which entry. BBT integrates with Zotero: Report Customizer to display the BibTeX key plus any conflicts between them in the zotero report.\nConfigurable citekey generator BBT also implements a new citekey generator for those entries that don\u0026rsquo;t have one set explicitly; the formatter pattern language mostly follows the JabRef key formatting syntax in the Better BibTeX preferences (you can get there via the Zotero preferences, or by clicking the Better BibTeX \u0026ldquo;Preferences\u0026rdquo; button in the addons pane.\nThe default key pattern is â€‹[auth:lower][shorttitle3_3][year]; if you have papers that use keys which were generated by the key generator of the standard Bib(La)TeX exporters of Zotero you may want to use [zotero:clean] instead in order to ease migration from existing exports for people who previously used the standard Zotero Bib(La)TeX exports. You will be offered this choice on first run of BBT.\nA common pattern is [auth:lower][year], which means\n last name of first author without spaces, in lowercase year of publication if any, a letter postfix (a, b, c, etc) in case of a clash (this part is always added, you can\u0026rsquo;t disable it, although you can change it to Zotero-style numeric)  note that changing the pattern used to cause all your non-pinned keys to be regenerated in Zotero 4. In Zotero 5, this is no longer the case; changing a pattern will only affect references being created/changed after you changed the pattern. If you want your keys to update after a pattern change you will have to select your references, right-click, and select Refresh. This will not affect keys you have pinned.\nIf you want to get fancy, you can set multiple patterns separated by a vertical bar, of which the first will be applied that yields a non-empty string. If all return a empty string, a random key will be generated.\nGenerating citekeys The full list of functions (extract data from your reference into your citekey) and filters (change the extracted data) is:\nFunctions  auth.auth.ea / edtr.edtr.ea, +initials, +\u0026lt;joinchar\u0026gt;: The last name of the first two authors, and \u0026ldquo;.ea\u0026rdquo; if there are more than two. auth.etal / edtr.etal, +initials, +\u0026lt;joinchar\u0026gt;: The last name of the first author, and the last name of the second author if there are two authors or \u0026ldquo;.etal\u0026rdquo; if there are more than two. authEtAl / edtrEtAl, +initials, +\u0026lt;joinchar\u0026gt;: The last name of the first author, and the last name of the second author if there are two authors or \u0026ldquo;EtAl\u0026rdquo; if there are more than two. This is similar to auth.etal. The difference is that the authors are not separated by \u0026ldquo;.\u0026rdquo; and in case of more than 2 authors \u0026ldquo;EtAl\u0026rdquo; instead of \u0026ldquo;.etal\u0026rdquo; is appended. authForeIni / edtrForeIni: The forename initial of the first author. authIniN / edtrIniN, +initials, +\u0026lt;joinchar\u0026gt;: The beginning of each author\u0026rsquo;s last name, using no more than N characters. authN_M / edtrN_M, +initials, +\u0026lt;joinchar\u0026gt;: The first N (default: all) characters of the Mth (default: first) author\u0026rsquo;s last name. authorIni / edtrorIni, +initials, +\u0026lt;joinchar\u0026gt;: The first 5 characters of the first author\u0026rsquo;s last name, and the last name initials of the remaining authors. authorLastForeIni / edtrorLastForeIni: The forename initial of the last author. authorLast / edtrorLast, +initials, +\u0026lt;joinchar\u0026gt;: The last name of the last author authorsAlpha / editorsAlpha, +initials, +\u0026lt;joinchar\u0026gt;: Corresponds to the BibTeX style \u0026ldquo;alpha\u0026rdquo;. One author: First three letters of the last name. Two to four authors: First letters of last names concatenated. More than four authors: First letters of last names of first three authors concatenated. \u0026ldquo;+\u0026rdquo; at the end. authorsN / editorsN, +initials, +\u0026lt;joinchar\u0026gt;: The last name of up to N authors. If there are more authors, \u0026ldquo;EtAl\u0026rdquo; is appended. authshort / edtrshort, +initials, +\u0026lt;joinchar\u0026gt;: The last name if one author is given; the first character of up to three authors' last names if more than one author is given. A plus character is added, if there are more than three authors. date: The date of the publication firstpage: The number of the first page of the publication (Caution: this will return the lowest number found in the pages field, since BibTeX allows 7,41,73--97 or 43+.) journal: returns the journal abbreviation, or, if not found, the journal title, If \u0026lsquo;automatic journal abbreviation\u0026rsquo; is enabled in the BBT settings, it will use the same abbreviation filter Zotero uses in the wordprocessor integration. You might want to use the abbr filter on this. keywordN: Tag number N lastpage: The number of the last page of the publication (See the remark on firstpage) library: returns the name of the shared group library, or nothing if the reference is in your personal library month: the month of the publication origdate: the original date of the publication origyear: the original year of the publication shorttitleN_M: The first N (default: 3) words of the title, apply capitalization to first M (default: 0) of those shortyear: The last 2 digits of the publication year title: Capitalize all the significant words of the title, and concatenate them. For example, An awesome paper on JabRef will become AnAwesomePaperJabref veryshorttitleN_M: The first N (default: 1) words of the title, apply capitalization to first M (default: 0) of those year: The year of the publication zotero: Generates citation keys as the stock Zotero Bib(La)TeX export does. Note that this pattern inherits all the problems of the original Zotero citekey generation \u0026ndash; you should really only use this if you have existing papers that rely on this behavior. postfix=\u0026lt;spec\u0026gt;/postfix+1=\u0026lt;spec\u0026gt;: a pseudo-function that sets the citekey disambiguation postfix using an sprintf-js format spec for when a key is generated that already exists. Does not add any text to the citekey otherwise. You must include exactly one of the placeholders %(n)s (number), %(a)s (alpha, lowercase) or %(A)s (alpha, uppercase). For the rest of the disambiguator you can use things like padding and extra text as sprintf-js allows. With +1 the disambiguator is always included, even if there is no need for it because no duplicates exist. The default format is %(a)s.  0: an alias for [postfix=-%(n)s]. Emulates the disambiguator of the standard Zotero exports. When you use [zotero] in your pattern, [zotero][0] is implied \u0026gt;X: a pseudo-function which aborts the current pattern generation if what came before it is X characters or less ([\u0026gt;0] is a typical use. You would typically use this with something like [auth][\u0026gt;0][year] | [title][year] which means if there's no author you get title-year rather than just year. =typeName: a pseudo-function that aborts the current pattern generation if the Zotero reference type does not equal typeName. You can test for multiple typenames at once by separating them with slashes ([=journalArticle/report]). Valid typeNames are: , artworkattachmentaudioRecordingbillblogPostbookbookSectioncaseclassic**computerProgramconferencePaperdictionaryEntrydocumentemailencyclopediaArticlefilmforumPostgazette**hearinginstantMessageinterviewjournalArticlelegalCommentary**lettermagazineArticlemanuscriptmapnewspaperArticlenotepatentpodcastpresentationradioBroadcastregulation**reportstandard**statutethesistreaty**tvBroadcastvideoRecordingwebpage.  Note: the functions above all have the clean filter (see below) automatically applied to them. If you want more control, auth, authIni, edtr, \u0026hellip; and all the author-related fields that mimic the JabRef equivalents also have capitalized versions (so Auth, AuthIni, Edtr, \u0026hellip;) which follow the same algorithm but do not have any cleaning (diacritic folding, space removal, stripping of invalid citekey characters) applied. These can be used to pass through the filters specified below much like the fields from the table above. See also \u0026ldquo;usage note\u0026rdquo; below. For all the non-author fields, you can use the unprocessed reference fields directly:\nDirect access to unprocessed fields   AbstractNote AccessDate AdminFlag** AdoptionDate**   Album** ApplicationNumber Archive ArchiveCollection**   ArchiveLocation ArtworkMedium ArtworkSize AssemblyNumber**   Assignee AudioFileType AudioRecordingFormat BillNumber   BlogTitle BookAbbreviation** BookTitle CallNumber   CaseName Code CodeNumber CodePages   CodeVolume Committee Company ConferenceDate**   ConferenceName Country Court DOI   Date DateAmended** DateDecided DateEnacted   DictionaryTitle Distributor Division** DocketNumber   DocumentName** DocumentNumber Edition EncyclopediaTitle   EpisodeNumber FilingDate FirstPage ForumTitle   GazetteFlag** Genre History ISBN   ISSN Institution InterviewMedium Issue   IssueDate IssuingAuthority JournalAbbreviation Jurisdiction**   Label Language LegalStatus LegislativeBody   LetterType LibraryCatalog ManuscriptType MapType   Medium MeetingName MeetingNumber** NameOfAct   Network NewsCaseDate** NumPages Number   NumberOfVolumes OpeningDate** Opus** OriginalDate**   Pages ParentTreaty** PatentNumber Place   PostType PresentationType PriorityDate** PriorityNumbers   ProceedingsTitle ProgramTitle ProgrammingLanguage PublicLawNumber   PublicationDate** PublicationNumber** PublicationTitle Publisher   References RegnalYear** RegulationType** RegulatoryBody**   Reign** Release** ReportNumber ReportType   Reporter ReporterVolume ResolutionLabel** Rights   RunningTime Scale Section Series   SeriesNumber SeriesText SeriesTitle Session   SessionType** ShortTitle SigningDate** Status**   Studio Subject SupplementName** System   ThesisType Title TreatyNumber** Type   University Url VersionNumber VideoRecordingFormat   Volume VolumeTitle** WebsiteTitle WebsiteType   YearAsVolume**      (fields marked ** are only available in Juris-M).\nFlags  +initials adds initials to any author name function. Specify using e.g. [auth+initials]  Filters  abbr: Abbreviates the text. Only the first character and subsequent characters following white space will be included. alphanum: clears out everything but unicode alphanumeric characters (unicode character classes L and N) ascii: removes all non-ascii characters capitalize: uppercases the first letter of each word clean: transliterates the citation key and removes unsafe characters condense=sep? (string): this replaces spaces in the value passed in. You can specify what to replace it with by adding it as a parameter, e.g condense=_ will replace spaces with underscores. Parameters should not contain spaces unless you want the spaces in the value passed in to be replaced with those spaces in the parameter fold=mode? (\u0026lsquo;german\u0026rsquo; | \u0026lsquo;japanese\u0026rsquo;): tries to replace diacritics with ascii look-alikes. Removes non-ascii characters it cannot match format-date=format? (string): formats date as by replacing y, m and d in the format lower: Forces the text inserted by the field marker to be in lowercase. For example, [auth:lower] expands the last name of the first author in lowercase. nopunct: Removes punctuation nopunctordash: Removes punctuation and word-connecting dashes numeric: returns the value if it\u0026rsquo;s an integer postfix=postfix (string): postfixes with its parameter, so postfix=_ will add an underscore to the end if, and only if, the value it is supposed to postfix isn\u0026rsquo;t empty prefix=prefix (string): prefixes with its parameter, so prefix=_ will add an underscore to the front if, and only if, the value it is supposed to prefix isn\u0026rsquo;t empty. If you want to use a reserved character (such as : or \\), you\u0026rsquo;ll need to add a backslash (\\) in front of it. replace=find (string), replace (string), mode? (\u0026lsquo;string\u0026rsquo; | \u0026lsquo;regex\u0026rsquo;): replaces text, case insensitive; :replace=.etal,\u0026amp;etal will replace .EtAl with \u0026amp;etal select=start? (number), n? (number): selects words from the value passed in. The format is select=start,number (1-based), so select=1,4 would select the first four words. If number is not given, all words from start to the end of the list are selected. skipwords: filters out common words like \u0026lsquo;of\u0026rsquo;, \u0026lsquo;the\u0026rsquo;, \u0026hellip; the list of words can be seen and changed by going into about:config under the key extensions.zotero.translators.better-bibtex.skipWords as a comma-separated, case-insensitive list of words.\nIf you want to strip words like \u0026lsquo;Jr.\u0026rsquo; from names, you could use something like [Auth:nopunct:skipwords:fold] after adding jr to the skipWords list. Note that this filter is always applied if you use title (which is different from Title) or shorttitle.\n split-ideographs: Treat ideaographs as individual words substring=start? (number), n? (number): (substring=start,n) selects n (default: all) characters starting at start (default: 1) transliterate: transliterates the citation key upper: Forces the text inserted by the field marker to be in uppercase. For example, [auth:upper] expands the last name of the first author in uppercase. (x): The string between the parentheses will be inserted if the field marker preceding this modifier resolves to an empty value. The placeholder x may be any string. For instance, the marker [volume:(unknown)] will return the entry's volume if set, and the string unknown if the entry's volume field is not set.  Usage note: the functions condense, skipwords, capitalize and select rely on whitespaces for word handling. The JabRef functions strip whitespace and thereby make these filter functions sort of useless. You will in general want to use the fields from the table above, which give you the values from Zotero without any changes. The fields with ** are only available in Juris-M.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/auto/",
	"title": "Automatic export",
	"tags": ["export", "automatic export", "overleaf", "git"],
	"description": "",
	"content": "To export a library, group or collection, right-click on it in the left Zotero pane and choose \u0026ldquo;Export Libraryâ€¦\u0026rdquo; or \u0026ldquo;Export Collectionâ€¦\u0026rdquo;. With BBT\u0026rsquo;s export translators (e.g., \u0026ldquo;Better BibTeX\u0026rdquo;), checking the Keep updated option will register the export for automation. After youâ€™ve completed the current export, any changes to the collection or library will trigger an automatic re-export to update the file. You can review/remove exports from the BBT preferences. While I\u0026rsquo;ve gone to some lengths to make sure performance is OK, don\u0026rsquo;t go overboard with the number of auto-exports you have going. Also, exporting only targeted selections over your whole library will get you better performance. You can set up separate exports for separate papers for example if you have set up a collection for each.\nManaging auto-exports After you\u0026rsquo;ve set up an auto-export using an Keep updated export, you can manage your auto-exports in the BBT preferences under the Automatic exports tab. There, you can remove auto-export, change settings on them, or remove them. You cannot add new auto-exports from here, that can only be done by initiating an export.\nGetting your BBT-generated bib(la)tex/citekeys to other places You may want to use your BBT generated bib(la)tex on other systems; maybe you use Overleaf (as I do), maybe you have your documents compiled using Travis (as I do). In any case, you want your auto-exported items to show up somewhere else. If you\u0026rsquo;re thinking of this in the context of Overleaf, here\u0026rsquo;s a TL;DR of the pros and cons:\n Auto-export + cloud-sync  pro: gets the full bibtex file to Overleaf, should be seamless con: have not tested, paid option on overleaf   Auto-export + git:  pro: gets the full bibtex file to Overleaf, tested and works con: requires technical expertise to set up, paid option on overleaf   citekey pinning:  pro: no setup con: only gets the BBT citekeys, BibTeX is generated by Zotero itself    DropBox / Google Drive / Box.com / \u0026hellip; Or any other of the plethora of choices that are available today that will \u0026ldquo;cloud-sync\u0026rdquo; your files. Just auto-export your bib file to a cloud-synced folder, and Bob\u0026rsquo;s your uncle. Incidentally, this should work with Overleaf, but I have not tested it personally, as I use\u0026hellip;\ngit support BBT auto-export works nicely with git services (such as Overleaf, which is where I use it myself; the instructions for setting up Overleaf for git can be found here, but any git service (gitlab, github, etc) should work exactly the same. I\u0026rsquo;m toying with various online services here.\nNote that this is more for the technically inclined, you will need to be comfortable with the command line to set this up. I can\u0026rsquo;t think of a real benefit to using git over cloud-sync unless, like me, you like to keep a backup history in git.\nTo activate git support, first clone the repo that holds your article/thesis/whatnot from your provider (github, overleaf, etc), run git config zotero.betterbibtex.push true in a command shell in that clone, and set up an auto export to that directory; at each update, BBT will now also push your library to the git service. For the technically curious, that means it does:\n git pull Performs the export git add \u0026lt;your library file\u0026gt; git commit -m \u0026lt;your library file\u0026gt; git push  Note that the nature of git commit/push is not file-bound; if you made edits to other files, and added those, they will be committed and pushed along. If you want to be super-careful, the best way to go about it is to have a separate clone of your repo that BBT auto-exports to, and then another repo that you do your own edits in. I don\u0026rsquo;t use it myself this way, but you have been warned.\nPinning BBT citekeys for Overleaf If you only want BBTs citation keys on Overleaf, you can simply pin them and use the regular Overleaf-Zotero integration. This will get you the pinned keys, but the bibtex is generated by the standard Zotero exporters.\n"
},
{
	"uri": "/zotero-better-bibtex/citing/cayw/",
	"title": "Cite as you Write",
	"tags": ["citation keys", "overleaf", "cite as you write"],
	"description": "",
	"content": "PSA: as of Zotero 5.0.71, access to the CAYW URL will no longer work from the browser for security reasons; curl and other programmatic access such as from editors access will work.\nGood news for TeXnicians and those down with Mark (aka Markdown, RST, whatnot): this is the time to go pester the author of your favorite editor for Zotero integration!\nEditor integration vim Graciously supplied by David Lukes:\npaste it in your .vimrc (and modify to your liking):\nfunction! ZoteroCite()\u0026#34; pick a format based on the filetype (customize at will) let format = \u0026amp;filetype =~ \u0026#39;.*tex\u0026#39; ? \u0026#39;citep\u0026#39; : \u0026#39;pandoc\u0026#39; let api_call = \u0026#39;http://127.0.0.1:23119/better-bibtex/cayw?format=\u0026#39;.format.\u0026#39;\u0026amp;brackets=1\u0026#39; let ref = system(\u0026#39;curl -s \u0026#39;.shellescape(api_call)) return refendfunctionnoremap \u0026lt;leader\u0026gt;z \u0026#34;=ZoteroCite()\u0026lt;CR\u0026gt;pinoremap \u0026lt;C-z\u0026gt; \u0026lt;C-r\u0026gt;=ZoteroCite()\u0026lt;CR\u0026gt;This inserts the citation at the cursor using the shortcut ctrl-z (in insert mode) or \u0026lt;leader\u0026gt;z (in normal, visual etc. modes, \u0026lt;leader\u0026gt; being backslash by default).\nZotero Citations for Atom A sample implementation of real integration (rather than the working-but-clunky workarounds using paste) can be found in the Zotero Citations package for the Atom editor.\nVS Code Citation Picker for Zotero If you don\u0026rsquo;t feel like typing citations out (and let\u0026rsquo;s be honest, you don\u0026rsquo;t), executing VS Code Citation Picker for Zotero extension for the VS Code editor will call up a graphical picker which will insert these for you, formatted and all.\nScrivener 2.0/Marked 2 for Mac Dave Smith has gracefully written instructions on how to set up Scrivener 2.0 and Marked 2 for OSX to use the CAYW picker, including ready-to-run apps\nScrivener 1.0 for Windows Emilie has writen instructions for using the CAYW picker for Scrivener 1.0 in Windows 10, with the necessary files\nLinux  Emma Reisz has gracefully written instructions and scripts for setting up CAYW on Linux. ConorIA has more versatile solution called zotero4overleaf, which was inspired by Emma\u0026rsquo;s scripts. This should allow use with Overleaf, which is pretty insane that it\u0026rsquo;s possible if you think about it.  Overleaf David Lukes takes Overleaf integration one step further with a GreaseMonkey/TamperMonkey userscript which not only allows popping up the CAYW picker straight from your browser, no other tools required, but adds a hotkey to refresh your bib file on Overleaf. This should work with the free subscription, no fiddling with git or dropbox required.\nDIY BBT exposes an URL at http://127.0.0.1:23119/better-bibtex/cayw 1. The url accepts the following URL parameters:\n   parameter      probe If set to any non-empty value, returns ready. You can use this to test whether BBT CAYW picking is live; it will not pop up the picker   format Set the output format   clipboard Any non-empty value will copy the results to the clipboard   minimize Any non-empty value will minimize Zotero windows after a pick   texstudio Any non-empty value will try to push the pick to TeXstudio   selected Any non-empty value will use the current selection in Zotero rather than popping up the pick window    The following formats are available:\n latex. Generates natbib citation commands. Extra URL parameters allowed:  command: the citation command to use (if unspecified, defaults to cite)   cite is an alias for latex with the assumption you want the cite command to be cite biblatex. Generates biblatex citation commands. Extra URL parameters allowed:  command: the citation command to use (if unspecified, defaults to autocite)   mmd: MultiMarkdown pandoc. Accepts additional URL parameter brackets; any non-empty value surrounds the citation with brackets asciidoctor-bibtex scannable-cite for the ODF scanner formatted-citation: output formatted citation as per the current Zotero quick-export setting, if it is set to a citation style, and not an export format formatted-bibliography: output formatted bibliography as per the current Zotero quick-export setting, if it is set to a citation style, and not an export format translate invokes a Zotero export translator. Extra URL parameters allowed:  translator: stripped name of one of the BBT translators (lowercased, remove \u0026lsquo;better\u0026rsquo;, and only the letters, e.g. biblatex or csljson), or a translator ID. Defaults to biblatex. exportNotes: set to true to export notes useJournalAbbreviation: set to true to use journal abbreviations   json: the full pick information Zotero provides.  The picker passes the following data along with your picked references if you filled them out:\n   field      locator the place within the work (e.g. page number)   prefix for stuff like \u0026ldquo;see \u0026hellip;\u0026rdquo;   suffix for stuff after the citations   suppress author if you only want the year    However not all output formats support these. Pandoc and scannable cite are the richest ones, supporting all 4. MultiMarkdown supports none. The formatted- formats will ignore these. LaTeX supports all 4, in a way:\n in the latex (natbib) format: if you choose suppress author for none or all of your references in a pick, you will get the citation as you would normally enter it, such as \\cite{author1,author2}, or \\citeyear{author1,author2}. If you use locator, prefix, suffix in any one of them, or you use suppress author for some but not for others, the picker will write them out all separate, like \\cite[p. 1]{author1}\\citeyear{author2}, as natbib doesn\u0026rsquo;t seem to have a good mechanism for combined citations that mix different prefixes/suffixes/locators. in the biblatex format: suppress author is ignored unless the command is one of \\cite, \\autocite or \\parencite AND there is one reference only, in which case the starred variant of the command is returned, which hides the author; for multiple references with locators, prefixes or suffixes, the s-affixed variant of the command is generated  Some of the formatters use abbreviated labels for the results if you include a locator. The defaults are:\n   locator label abbreviation     article art.   chapter ch.   subchapter subch.   column col.   figure fig.   line l.   note n.   issue no.   opus op.   page p.   paragraph para.   subparagraph subpara.   part pt.   rule r.   section sec.   subsection subsec.   Section Sec.   sub verbo sv.   schedule sch.   title tit.   verse vrs.   volume vol.    In your call to the CAYW URL, you can override the abbreviations by adding them to the query, e.g. http://127.0.0.1:23119/better-bibtex/cayw?format=mmd\u0026amp;page=\u0026amp;Section=sec., page-picks will have no label, and Section-picks will get sec. rather than Sec..\nThe clipboard option can be used as a workaround for editors that haven\u0026rsquo;t gotten around to integrating this yet. If you use this option you will probably want to bind to a hotkey, either system-wide (which is going to be platform-dependent, I know AutoHotKey works for windows, for OSX Karabiner ought to do the job, and for Linux xbindkeys could do the job.\nFor example, if you call up http://127.0.0.1:23119/better-bibtex/cayw?format=mmd\u0026amp;clipboard=yes, the Zotero citation picker will pop up. If you then select two references that happen to have cite keys adams2001 and brigge2002, then\n the response body will be [#adams2001][][#brigge2002][], and [#adams2001][][#brigge2002][] will be left on the clipboard  More of a gimmick than anything else, but if you add select=true, BBT will select the picked items in Zotero.\nPlaying around For testing for other markdown formatters, you can construct simple references yourself, using the playground formatter, with parameters:\n citeprefix, default empty, for text to put before the full citation. citepostfix, default empty, for text to put after the full citation. keyprefix, default empty, for text to put before each individual citekey keypostfix, default empty, for text to put after each individual citekey separator, default ,, for text to put between citekeys  Alternately, the json formatter will just give you the picks as JSON which you can turn into pretty much anything if you can code.\nbut if you need an extra format, just ask.\n  For Juris-M, the port number 23119 must be replaced with 24119. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "/zotero-better-bibtex/support/",
	"title": "Support",
	"tags": [],
	"description": "",
	"content": "Before all else, thank you for taking the time for submitting an issue, and I\u0026rsquo;m sorry that I\u0026rsquo;ve probably interrupted your flow.\nYour report matters to me. I love hearing my software helps you, and it pains me to know that things aren\u0026rsquo;t working for you.\nIf you have any questions on the use of the plugin, please do not hesitate to file a GitHub issue to ask for help.\nIf you\u0026rsquo;re reporting a bug in the plugin, please take a moment to glance through the Support Request Guidelines below; it will make sure I get your problem fixed as quick as possible. The guidelines are very detailed, perhaps to the point of being off-putting, but please do not fret; these guidelines simply express my ideal bug submission. I of course prefer very clearly documented issue reports over fuzzy ones, but I prefer fuzzy ones over missed ones.\nSubmitting an issue You can report problems with BBT by opening a new issue on github. Unfortunately, my time is extremely limited for a number of very great reasons (you shall have to trust me on this). Because of this, I cannot accept bug reports or support requests on anything but the latest version. By the time I get to your issue, the latest version might have bumped up already, and you will have to upgrade (you might have auto-upgraded already however) and re-verify that your issue still exists. Apologies for the inconvenience, but such are the breaks.\n You can send off an debug report by selecting Send Better BibTeX debug report from the Help menu. Post the resulting ID (displayed in red) in a github issue. You can send off an debug report for a specific collection or (selection of) items that fails to export by selecting those, right-clicking and choosing Send Better BibTeX debug report  That in itself will in many cases give me what I need. Don\u0026rsquo;t forget to copy the generated ID to paste it into the github issue; you cannot call it up later (although you can just do it again).\nFor the fastest fix:\n Please be around for follow-up questions and verification I\u0026rsquo;ve fixed the problem. It\u0026rsquo;s really frustrating for me to get a bug report, work feverishly to get it fixed, and then the reporter having no time to verify it is actually addressed. Please include specifics of what doesn\u0026rsquo;t work. I use this plugin every day myself, so \u0026ldquo;it doesn\u0026rsquo;t work\u0026rdquo; is trivially false. Please tell me what you expected and what you see happening, and the relevant difference between them. Please don\u0026rsquo;t file a jumble of problems in one issue. Posting a slew of separate issues is much preferred, as I can more easily tackle them one by one. Do not hijack existing issues. You can chime in on existing issues if you\u0026rsquo;re close to certain it is the same problem, otherwise, open a new issue. I rather have duplicate issues than issues I cannot close because they are in fact two or more issues. If your problem pertains to importing BibTeX files, you must put up a sample for me to reproduce the issue with. Do not paste the sample in the issue, as the issue tracker will format it into oblivion. Instead, choose one of these options:  Post an URL in the issue where I can download your sample, or Put the sample in a gist and post the URL of the gist into the issue   If your problem pertains to BBT interfering with other plugins (which wouldn\u0026rsquo;t be the first time), and this interference has something to do with importing, you must include a sample file that triggers the issue. I know it may seem that \u0026ldquo;any file triggers it\u0026rdquo; \u0026ndash; I need a specific file that does so I know we\u0026rsquo;re looking at the same problem.  Known problems If Zotero stalls after installing BBT, it is often a one-time thing as the cache fills.\n"
},
{
	"uri": "/zotero-better-bibtex/",
	"title": "Better BibTeX for Zotero",
	"tags": [],
	"description": "",
	"content": "Better BibTeX for Zotero Better BibTeX (BBT) is an extension for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown).\nFeatures Facilities for generating citation keys  Automatically generate citation keys without key clashes! Generate citation keys that take into account existing keys in your library even when they are not part of the items you export. Prevent random breakage! Generate citation keys based on JabRef patterns. Set your own, stable citation keys, drag and drop LaTeX citations, add other custom BibLaTeX fields.  Conversion between formats and encodings   Zotero does all its work in UTF-8 Unicode, which is absolutely the right thing to do. Unfortunately, for those shackled to BibTeX and who cannot (yet) move to BibLaTeX, unicode is a major PITA. Also, Zotero supports some simple HTML markup in your references that Bib(La)TeX won\u0026rsquo;t understand.\n  BBT will convert from/to HTML/LaTeX:\n \u0026lt;i\u0026gt;...\u0026lt;/i\u0026gt;â‡”\\emph{...}/\\textit{...} \u0026lt;b\u0026gt;...\u0026lt;/b\u0026gt;â‡”\\textbf{...} \u0026lt;sup\u0026gt;...\u0026lt;/sup\u0026gt;â‡”\\textsuperscript{...} and \u0026lt;sub\u0026gt;...\u0026lt;/sub\u0026gt;â‡”\\textsubscript{...}.  More can be added on request.\nBBT contains a comprehensive list of LaTeX constructs, so stuff like \\\u0026quot;{o} or \\\u0026quot;o will be converted to their unicode equivalents on import (e.g., \\\u0026quot;{o} to Ã¶), and their unicode equivalents back to \\\u0026quot;{o} if you have that option enabled (but you don\u0026rsquo;t have to if you use BibLaTeX, which has fairly good Unicode support).\nIf you need literal LaTeX in your export: surround it with \u0026lt;script\u0026gt;\u0026hellip;\u0026lt;/script\u0026gt; (or \u0026lt;pre\u0026gt;\u0026hellip;\u0026lt;/pre\u0026gt;, which do the same) markers.\n  Facilities for exporting data from Zotero  Highly customized exports. Fixes date field exports: export dates like \u0026lsquo;forthcoming\u0026rsquo; as \u0026lsquo;forthcoming\u0026rsquo; instead of empty, but normalize valid dates to unambiguous international format. Auto export of collections or entire libraries when they change. Pull export from the embedded webserver. Automatic journal abbreviation.  Getting started To get started, read the installation instructions.\nHow does it work ? At its core, BBT behaves like any Zotero import/export module; anywhere you can export or import bibliography items in Zotero, you\u0026rsquo;ll find Better X listed among the choices.\nIf nothing else, you could keep your existing workflow as-is, and just enjoy the improved LaTeX â†” unicode translation on import and export and more accurate field mapping.\nBetter BibTeX works from BibTeXing and Tame the BeaST for BibTeX, and The Biblatex Package for BibLaTeX, but since there isn\u0026rsquo;t really a definitive manual for either format that is universally followed by Bib(La)TeX editors/processors, I\u0026rsquo;m pragmatic about implementing what works.\nGot problems? We got fixes! If you have any questions on BBT\u0026rsquo;s use, do not hesitate to file a GitHub issue and ask for help.\nIf you\u0026rsquo;re reporting a bug in BBT, please take a moment to glance through the support request guidelines; it will make sure I get your problem fixed as quick as possible. Clear bug reports commonly have really short time-to-fix, so if you report something, stick around \u0026ndash; it may be done as you wait.\nThe support request guidelines are very detailed, perhaps to the point of being off-putting, but please do not fret; these guidelines simply express my ideal bug submission. I of course prefer very clearly documented issue reports over fuzzy ones, but I prefer fuzzy ones over missed ones.\n"
},
{
	"uri": "/zotero-better-bibtex/support/faq/",
	"title": "Frequently Asked Questions",
	"tags": ["export"],
	"description": "",
	"content": "Are there any plans to support Firefox 57+? BBT lives where Zotero lives, and Zotero only has standalone these days. BBT is installed inside Zotero instead of in the browser. Please see the installation instructions to get started with BBT.\nBBT is changing the capitalization of my titles \u0026ndash; why? There isn\u0026rsquo;t a straightforward one-to-one mapping for all Zotero to Bib(La)TeX fields. For most I can make reasonable choices, but there are some things where Better BibTeX takes a little more liberties with your references in order to get sensible output.\nTitle fields in particular are a total mess. Zotero recommends having your titles in sentence case because that\u0026rsquo;s what the embedded citation processor expects, but of course, BibLaTeX expects your titles to be in Title Case\u0026hellip; but only if they\u0026rsquo;re in English. Nice. In order to translate the Zotero recommendation into Bib(La)TeX best practice, BBT will title-case the titles of English references. English references, as far as BBT is concerned, are those references that have their language explicitly set to an English language (american counts as English for example), and those references that have no explicit language set. To do this, BBT uses the same title-caser that Zotero uses to produce title-cased styles such as Chicago.\nThe titles so modified will then pass through your Bib(La)TeX processor, which will in turn try to lowercase or initial-caps some words and not others \u0026ndash; for English references. But then sometimes, you want words that have capitals to keep. BBT assumes that if a word has at least one capital letter (subject to some rather complex exceptions) you meant it to be there, and you want BibTeX to leave it alone no matter what. To do that, it wraps those (strings of) words in those double braces. This is to let BibTeX know that ISDN may not be changed to isdn or Isdn, regardless of the bibliography style in play.\nThe simplest approach would be to wrap title fields in extra braces as a whole, and some sites will erroneously recommend doing so, but as per Mencken, for every complex problem there is an answer that is clear, simple, and wrong; the rules for bib(la)tex capitalization are complex, and this is one of those answers that gets it entirely wrong, even if it will seem to work. There are styles do need to recapitalize parts of the title (for example to selectively downcase the titlecasing), and having the whole field so wrapped interferes with that. So Better BibTeX wraps individual words \u0026ndash; or strings of those words \u0026ndash; that have capitals in them with double braces.\nFor English titles BBT will Title Case and brace-protect your titles on output. Except, those Title Cased words which BBT changed itself will not be wrapped in double-braces, as it is OK for the styles to change casing for those, depending on the style at play. So I like ISDN heaps better than dialup would output to I Like {{ISDN}} Heaps Better than Dialup. Apparently non-English titles are supposed to be in sentence case, so BBT doesn\u0026rsquo;t touch those.\nYou can steer this process somewhat by enclosing the parts you don\u0026rsquo;t want case manipulation on in \u0026lt;span class=\u0026quot;nocase\u0026quot;\u0026gt;...\u0026lt;/span\u0026gt;. Anything between those won\u0026rsquo;t be touched by Zotero or BBT. This is formally supported by Zotero and will work in the Word/LibreOffice plugins as well as in the BibTeX export. This will be required for words you wish to always keep lowercase, for example. Also, if you don\u0026rsquo;t generally use Zotero for generating bibliographies but just for BibTeX reference management, you can turn on the hidden preference suppressTitleCase to keep BBT from applying title-casing, but take note that if you do this, the bibliographies you get from Zotero and the bibliograhies you get through Bib(La)TeX will differ, and you can\u0026rsquo;t complain about this.\nWhy the double braces? But why then the double-braces ({{...}}) rather than the commonly recommended single braces ({...})?\nThis is not because of some arcane aesthetic preference, but because the Bib(La)TeX case protection rules are incredibly convoluted (#541, #383). For example, here are some \u0026ldquo;interesting\u0026rdquo; cases that BBT has learned to deal with. Did you know that\n {\\emph{Homo sapiens}} un-case-protects Homo sapiens? It sure was a surprise to me. So \\emph{Homo sapiens} is case-protected (will not be recapitalized by Bib(La)TeX), but {\\emph{Homo sapiens}} is not case-protected so it will be recapitalized. So to get predictable behavior, this is written out as {{\\emph{Homo sapiens}}}. casing behavior over the whole reference field depends on whether there\u0026rsquo;s a slash-command at the first position of the title? apparently, to make sure that Reading HLA Hart's: \u0026lt;i\u0026gt;The Concept of Law\u0026lt;/i\u0026gt; renders as expected means I have to output the astoundingly ugly {Reading {{HLA Hart}}'s: {{{\\emph{The Concept}}}}{\\emph{ of }}{{{\\emph{Law}}}}}?  To make matters even more complex, so many people have in the past wrongly recommended to \u0026ldquo;just wrap everything in one extra set of braces\u0026rdquo; that biblatex now ignores exactly that pattern (see here and here).\nThe double-bracing is the only unambiguous rule I could construct that consistently gets the rendered reference right (so far).\nBib(La)TeX provides a never-ending stream of edge cases, which BBT tries to decide algorithmically. I try to keep the resulting file as pretty as I can (I\u0026rsquo;m sensitive to the aesthetics myself), but the target is best described as \u0026ldquo;given reasonable input, generate well-rendering output\u0026rdquo;, and reasonable-to-well-rendering in the BBT case will have to include \u0026ldquo;follows Zotero recommendations for storing references\u0026rdquo; and \u0026ldquo;prefer intent-preserving LaTeX over pretty-looking LaTeX\u0026rdquo;.\nBib(La)TeX be crazy.\nBut why so many double braces? Zotero expects titles to be entered in sentence case; bib(la)tex expects them to be entered in Title Case. BBT converts titles to title case to compensate for this. Zotero does allow for exceptions to the sentence-case rule, which you can mark by surrounding them with \u0026lt;span class=\u0026ldquo;nocase\u0026rdquo;\u0026gt; \u0026hellip; \u0026lt;/span\u0026gt;, and BBT will take that hint and use double braces (see previous sections) to achieve the same effect in bib(la)tex. But BBT does one thing more \u0026ndash; if BBT sees a word containing capital letters which is not at the start of a (sub)sentence (such as the ISDN in I like ISDN heaps better than dialup), it will assume it is a proper noun (otherwise why would a word mid-sentence have a capital letter), and also brace-protect it.\nUnfortunately, there is a lot of variation in how titles are offered by the sites Zotero scrapes \u0026ndash; some sentence case, some title case \u0026ndash; so it is not at all uncommon for title-cased titles to (incorrectly) end up in Zotero, and as a result you\u0026rsquo;ll get a lot of unnecesary braces. For example, if you (incorrectly!) have the following in Zotero:\n I Like ISDN Heaps Better than Dialup\n BBT will export that as\n title = {I {{Like ISDN Heaps Better}} than {{Dialup}}}\n which is clearly not correct. The proper way to fix this is to sentence case this in Zotero \u0026ndash; if you generate a bibliography through Zotero itself, there are styles where this title-cased title will not render correctly. But if you have a lot of these, and you do not care about the quality of the bibliographies generated by Zotero itself, you can disable the title-casing and/or the brace protection.\nImporting JabRef databases JabRef import works generally well but has a few gotchas:\n If you have dynamic (query-based) groups these will not be imported. If you have set a default folder for the pdf files in your JabRef preferences, the file paths in your JabRef database will be relative to that directory, but BBT can\u0026rsquo;t read those preferences, so all attachments will fail to import. You can fix this by going into Jabref and selecting File - Library properties option, then filling out the path to the attachments directory in general file directory.  Background exports have been disabled When BBT encounters an error during a background export, it will automatically disable them; the UI will show Background exports disabled. For reasons that I haven\u0026rsquo;t yet discovered, Firefox (the platform Zotero still builds on) sometimes declines BBT\u0026rsquo;s request for a background thread, and will decline them until Zotero is restarted. In order to let you keep on working, BBT will disable background exports, and subsequent exports will be the normal Zotero foreground exports. You can re-enable the background exports using the parallel exports slider in BBT\u0026rsquo;s Advanced preferences, under the export tab, or by restarting Zotero, which will re-enable them if you haven\u0026rsquo;t manually set the slider to 0.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/pandoc/",
	"title": "Markdown/Pandoc",
	"tags": [],
	"description": "",
	"content": "In addition to LaTeX, BBT plays very well with pandoc:\n you can drag and drop citations from Zotero into your markdown documents. you can cite as you write in your favorite editor with varying levels of comfort, mostly depending on how easy (VSCode, Sublime) or hard (looking at you Scrivener) it is to extend your editor. you can even convert your markdown document into a LibreOffice/Word document with actual live Zotero references as if you had entered them into Zotero all along (see below)  Use CSL, not bibtex with pandoc Many tutorials on the use of pandoc to generate documents with citations seem to use bibtex as a bibliography format. I would encourage the use of CSL instead. Internally, both Zotero and pandoc-citeproc use CSL citation engines; the two options you have are:\n    Not only is the extra step through \u0026ldquo;pandoc-citeproc in convert mode\u0026rdquo; unnecesary, the translation between bibtex and CSL is complex and often lossy:\n Because Zotero primarily targets the built-in CSL processor, it assumes titles are stored in sentence case (as CSL styles assume sentence case); bibtex expects title case titles, so Zotero converts titles to title case on export to bibtex. \u0026ldquo;pandoc-citeproc in convert mode\u0026rdquo; will then take that title-cased bibtex and convert it back to sentence case. Neither Zotero nor pandoc-citeproc use natural language processing; the conversion between casing styles is largely done using heuristics. This conversion is imperfect, and you don\u0026rsquo;t gain any benefit from it. The item model of Zotero/CSL on the one hand and bibtex on the other has important differences, and in the conversion, choices must be made on what to put where, and what to drop. Zotero and pandoc-citeproc do not necessarily have the same business rules, and this unspoken difference can be another cause of loss.  All of these problems go away if you just skip the detour via bibtex and export (Better) CSL from Zotero and use that in your pandoc process.\nFrom Markdown to Zotero live citations You can convert a Pandoc-compatible markdown source to a LibreOffice or Word document with live citation fields connecting to Zotero.\n download the Pandoc filter add some metadata to your markdown file in a YAML header:  --- # all the regular stuff you have here zotero: library: \u0026lt;group name\u0026gt; # omitted to use your personal library scannable-cite: false # only relevant when your compiling to scannable-cite .odt client: \u0026lt;zotero or jurism\u0026gt; # defaults to zotero author-in-text: false # when true, enabled fake author-name-only cites by replacing it with the text of the last names of the authors csl-style: apa # pre-fill the style ... or you can specify them on the pandoc command line:\npandoc -s --lua-filter=zotero.lua --metadata=zotero_scannable_cite:true --metadata=client:jurism ... And hey presto, a live LibreOffice/Word file, or an ODT file with scannable cites. When you first open the document with live citations, open the Zotero document preferences and click OK before you refresh, or you\u0026rsquo;ll get a confirmation popup for each citation. Also, the Word document is sometimes deemed corrupt when opening it, but running the pandoc command again without any changes fixes it Â¯\\_(ãƒ„)_/Â¯\nYou can also specify transferable: true to create a transferable document. You don\u0026rsquo;t really need this for ODT or DOCX (just use Pandoc to create those directly using this filter), but it will allow transferring your document to GDocs.\nZotero needs to be running, with BBT installed, while you compile your document.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/pull/",
	"title": "Pull export",
	"tags": ["export"],
	"description": "",
	"content": "You can fetch your bibliography on the url http://127.0.0.1:23119/better-bibtex/collection?[collectionID].[format] 1. You can get this URL for a group, library or collection by right-clicking it and selecting Download Better BibTeX export...\nYou can add options to the export as URL parameters:\n \u0026amp;exportNotes=[true|false] \u0026amp;useJournalAbbreviation=[true|false]  You can fetch your library as part of your build, using something like curl from your Makefile, or with a BibLaTeX remote statement like\n\\addbibresource[location=remote]{http://127.0.0.1:23119/better-bibtex/collection?/0/8CV58ZVD.biblatex} format can be:\n biblatex for BibLaTeX bibtex for BibTeX json or csljson for CSL-JSON yaml, yml or cslyaml for CSL-JSON in YAML format jzon for BetterBibTeX JSON debug format the value of translatorID taken from the header of any existing Zotero translator to get an export in that translator format  Pull export will only work if you are compiling your document on the same system your Zotero client with BBT runs on. Technically it can be made to work for pulling from other systems, but it\u0026rsquo;s even more arcane to set up than git support.\nNote that as of Zotero 5.0.71, access to this URL will no longer work from the browser for security reasons; curl and other programmatic access will work.\n  Replace portnumber 23119 with 24119 for Juris-M. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "/zotero-better-bibtex/support/performance/",
	"title": "Performance",
	"tags": ["export", "cache"],
	"description": "",
	"content": "The Better BibTeX exporters are a lot slower than the standard Zotero Bib(La)TeX exporters. If you have a small library, you will not likely notice this, but if you have several thousand references, and you are in the habit of exporting substantial parts of your library, this gets annoying really fast.\nTo deal with this problem, Better BibTeX implements an extensive caching system. With a filled cache, Better BibTeX is substantially faster than the default Zotero exporters. Specifically for automatic background exports, a filled cache is a good thing to have.\nFor technical reasons, if you export the file attachments as part of your export, the cache is skipped altogether, so this will always be slow. This is also why you cannot set up auto-exports with file exports.\nTL;DR There\u0026rsquo;s a more technical explanation below, but the TL;DR version is that you want to have a filled cache. If you want to get it over with, export your entire library (once, no need to tick \u0026lsquo;Keep Updated\u0026rsquo;) using the \u0026lsquo;Better BibTeX\u0026rsquo; format and go grab coffee (or lunch, depending on the size of your library). After that, things should be much better.\nHere are some numbers from a test with a library consisting of:\n 24352 items 424 notes 10407 attachments  (attachments are not exported for this test, but they still required serialization and handling):\n   Exporter      Zotero 112s   Better BibTeX, empty cache 235s   Better BibTeX, filled cache 51s    note: if you have \u0026lsquo;Export files\u0026rsquo; enabled during export, or set the JabRef export format to 4, the cache will not be active. If you do large (auto)exports, avoid these.\nCaching Initial state Initially, your cache will be empty. The first export of any reference using Better BibTeX will therefore be a little over twice as slow as subsequent exports. After that, it gets pretty zippy, as the process of exporting a reference will also cache that reference for the current export settings. This means if you export once with, and once without notes (one of the options in the export popup), you will hit an empty cache twice. If you set up an automatic export, the export you do that registers it for auto-update will already be the first export, so if your references weren\u0026rsquo;t cached already, they will be before subsequent auto-exports.\nCache refresh The cache entry for a reference is retained as long as you do not make any changes to that reference. Any change you make will drop all cache entries for that reference (so all variants you had for different export options). The cache for that reference will be refreshed as soon as you export it again, either manually or automatically.\nCache drop Any change you make to the Better BibTeX preferences will drop the whole cache. The behavior of the Better BibTeX exporters are highly configurable, and it is impossible for me to figure out which entries would be affected specifically. Keep this in mind for large libraries; if you want to make changes to your configuration, make them all at once.\nThe same applies to upgrades. As the export behavior quite frequently changes between versions, Better BibTeX will drop the cache during first startup of the newer version. This can be a nuisance if you have a large library, but it\u0026rsquo;s the only way to keep support feasible.\n"
},
{
	"uri": "/zotero-better-bibtex/citing/aux-scanner/",
	"title": "AUX Scanner",
	"tags": ["citation keys"],
	"description": "",
	"content": "You can populate a reference collection, or tag items in your library, from an existing paper by scanning the aux file generated by bibtex. AUX Scanning can be triggered from the Tools menu (for tagging the cited items) or by right-clicking a collection (for adding them to a collection). The scanner will read your AUX files and will put references you cited in the associated LaTeX document into the current collection.\nBy default, BBT will add a note for references cited in the LaTeX document but which do not exist in your Zotero library, but citation keys must be present in your library before the scan is started \u0026ndash; BBT will by default not create new references for citekeys it doesn\u0026rsquo;t already know about. You can enable \u0026lsquo;AUX Import\u0026rsquo; in the preferences, and when that is on, if the scan finds citekeys not already in your Zotero library, it will attempt to read those (but only those) items from the bibtex file named in the aux file.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/scripting/",
	"title": "Scripting",
	"tags": ["scripting"],
	"description": "",
	"content": "You wanted customized\u0026hellip; You got customized. If you go into the Advanced tab of the Better BibTeX preferences you will find a text box (empty by default) where you can edit a javascript snippet which will be executed for each reference generated in the Bib(La)TeX exporter. In this code, you have access to the reference just before it will be written out and cached. There is an API to do this, and it\u0026rsquo;s fairly stable, but usually you can just open a new issue and ask me to write it, and I\u0026rsquo;ll add it here (it\u0026rsquo;s how the examples got here). Postscripts are available in 4 of the translators:\n BetterBibLaTeX BetterBibTeX BetterCSLJSON BetterCSLYAML  You can (and totally should) check in which translator your postscript is running, which you can do by testing for Translator.\u0026lt;id\u0026gt; where \u0026lt;id\u0026gt; is one of these four names, using something like\nif (Translator.BetterBibLaTeX) { ... } or alternately on the full name using a switch\nswitch (Translator.header.label) { case \u0026#39;Better BibLaTeX\u0026#39;: ... break; case \u0026#39;Better BibTeX\u0026#39;: ... break; case \u0026#39;Better CSL JSON\u0026#39;: ... break; case \u0026#39;Better CSL YAML\u0026#39;: ... break; } If you want to run a postscript in the CSL translators but don\u0026rsquo;t care whether it will output YAML or JSON, you can test for Translator.BetterCSL, which will be true when either one of BetterCSLJSON or BetterCSLYAML is active. Analogously, Translator.BetterTeX will be true if either of Better BibTeX or Better BibLaTeX is active.\nIn the postscript, the reference being built is available as reference, and the Zotero item it is being built from is available as item. For backwards compatibility, in the BetterBib(La)TeX contexts, the reference being built is also available as this, and the Zotero item it is being built from as this.item, but use of these is discouraged now.\nYou should really test for the translator context in your postscripts using the Translator.\u0026lt;name\u0026gt; tests mentioned above. If you don\u0026rsquo;t because you have a postscript that pre-date postscript CSL support, you will probably be using the legacy use of this to set things on the reference being built, and calling this.add in those postscripts; since, for CSL postscripts, this is not set, it will make the script will non-fatally error out, so you\u0026rsquo;re very probably good to go as-is. But please fix your postscripts to test for the translator context.\nThe API for Better BibTeX and Better BibLaTeX The postscript should be a javascript snippet. You can access the data with following objects and methods:\n  reference is the BibTeX reference you are building, and the reference has a number of fields.\n  item is the Zotero item that\u0026rsquo;s the source of the reference.\ne.g. you can access the date in zotero item item.date.\n  reference.has is a dictionary of fields for output.\ne.g. you can see whether the year field has been set by testing for reference.has.year\n  reference.add is the function to add or modify keys in reference.has. It accepts the following named parameters in the form of an object:\n name: name of the bib(la)tex field to output value: the value for the field without LaTeX encoding bibtex: the value for the field with LaTeX encoding already applied. If both bibtex and value are present, bibtex takes precedence enc: specifies how to encode the value field. Valid values are:  latex: encode markup and special characters to LaTeX. This is the default, if you don\u0026rsquo;t provide an enc parameter, latex is assumed verbatim: encode under verbatim rules literal: encode under literal rules raw: assume value is already LaTeX-encoded (same as passing the value in bibtex) url: encode as verbatim url   sep: if value is an array, and enc is latex, encode each array element using latex and join the results with the string in sep. Defaults to an empty string. html: boolean indicating whether the value is full HTML (really only useful for notes)  e.g. change the value of year in output reference.add({name: 'year', value: \u0026quot;your_year_value\u0026quot;})\n  reference.addCreators adds the contents of item.creators to reference.\nauthor encoding has a fair number of moving bits and generates multiple fields (author, editor, etc), this function is here so you can manipulate item.creators and call reference.addCreators to replace the existing creator fields on reference.\n  reference.remove removes a field previously added by reference.add or reference.addCreators\n  The API for BetterCSLJSON and BetterCSLYAML  reference is the CSL object being built. Any changes made to this object will directly change the CSL object being output. item is the Zotero reference it\u0026rsquo;s being built from.  There isn\u0026rsquo;t really an API. You can use regular javascript to manipulate the reference object, which is a CSL-JSON object.\nDebugging There isn\u0026rsquo;t much in place in terms of debugging, as tranlators (and thus postscripts) are not allowed to do any UI work. You can do old-fashioned printf-style debugging by calling Zotero.debug(...) in your postscript \u0026ndash; it will output the string you pass into the Zotero debug log which you can inspect from the Help menu. You can for example do Zotero.debug(JSON.stringify(item)) to see what the Zotero item looks like to the translator.\nSamples Add accessdate, url for BibTeX Since BibTeX doesn\u0026rsquo;t really have well-defined behavior across styles the way BibLaTeX does, BBT can\u0026rsquo;t generate URL data which is compatible with all BibTeX styles. If you know the style you use yourself, you can add the data in the format you want using a postscript. The script below will add a note for the last accessed date, and a \\url tag within the howpublished field, but only for BibTeX, not for BibLaTeX, and only for webpage entries:\nif (Translator.BetterBibTeX \u0026amp;\u0026amp; item.itemType === \u0026#39;webpage\u0026#39;) { if (item.accessDate) { reference.add({ name: \u0026#39;note\u0026#39;, value: \u0026#34;(accessed \u0026#34; + item.accessDate.replace(/\\s*T?\\d+:\\d+:\\d+.*/, \u0026#39;\u0026#39;) + \u0026#34;)\u0026#34; }); } if (item.url) { reference.add({ name: \u0026#39;howpublished\u0026#39;, bibtex: \u0026#34;{\\\\url{\u0026#34; + reference.enc_verbatim({value: item.url}) + \u0026#34;}}\u0026#34; }); } } Comma\u0026rsquo;s in keywords If you want to retain commas in your keywords (e.g. for chemical elements) and separate with a comma-space, you could do:\nif (Translator.BetterTeX) { reference.add({ name: \u0026#39;keywords\u0026#39;, value: item.tags, sep: \u0026#39;, \u0026#39; }); } as the default encoder knows what to do with arrays, if you give it a separator.\nAdd DOI in note field if (Translator.BetterTeX \u0026amp;\u0026amp; item.DOI) { var doi = item.DOI; if (doi.indexOf(\u0026#39;doi:\u0026#39;) != 0) { doi = \u0026#39;doi:\u0026#39; + doi; } reference.add({ name: \u0026#39;note\u0026#39;, value: \u0026#39;[\u0026#39; + doi + \u0026#39;]\u0026#39; }); } Add arXiv data arXiv is a bit of an odd duck. It really isn\u0026rsquo;t a journal, so it shouldn\u0026rsquo;t be the journal title, and their own recommendations on how to include arXiv IDs is a little lacking: this doesn\u0026rsquo;t say where to include the arXiv:... identfier, and this says not to include it. Nor does it give any recommendations on how to achieve the desired output.\nBut for arguments' sake, let\u0026rsquo;s say you get the desired output by including an empty journaltitle field (ugh) and stuff the arXiv:... ID in the pages field (ugh). You could do that with the following postscript:\nif (Translator.BetterTeX \u0026amp;\u0026amp; item.arXiv.id) { reference.add({ name: \u0026#39;pages\u0026#39;, value: item.arXiv.id }); if (!reference.has.journaltitle) { reference.add({ name: \u0026#39;journaltitle\u0026#39;, bibtex: \u0026#39;{}\u0026#39; }); } } Custom field order Specify the ordering of the listing of fields in an exported Biblatex/Bibtex entry. Your postscript:\nif (Translator.BetterTeX) { // the bib(la)tex fields are ordered according to this array.  // If a field is not in this list, it will show up after the ordered fields.  // https://github.com/retorquere/zotero-better-bibtex/issues/512  const order = [\u0026#39;author\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;publisher\u0026#39;] for (const [field, value] of order.filter(front =\u0026gt; reference.has[first]).concat(Object.keys(reference.has).filter(other =\u0026gt; !order.includes(other))).map(f =\u0026gt; [f, reference.has[f]])) { delete reference.has[field] reference.has[field] = value } } In Zotero when using an Export Format of Better Biblatex we\u0026rsquo;ll get something like the following entry \u0026hellip;\nFurther details Export to Biblatex/Bibtex. Custom field order. #512.\nDetect and protect LaTeX math formulas if (Translator.BetterTeX \u0026amp;\u0026amp; reference.has.title) { reference.add({ name: \u0026#39;title\u0026#39;, value: item.title.replace(/(\\$.*?\\$)/g, \u0026#39;\u0026lt;script\u0026gt;{$1}\u0026lt;/script\u0026gt;\u0026#39;) }); } Or, detect and protect (simple) LaTeX commands if (Translator.BetterTeX \u0026amp;\u0026amp; reference.has.journal) { reference.add({ name: \u0026#39;journal\u0026#39;, value: reference.has.journal.value.replace(/(\\\\\\w+)/g, \u0026#39;\u0026lt;script\u0026gt;{$1}\u0026lt;/script\u0026gt;\u0026#39;) }); } Detect and protect MathJax if (Translator.BetterTeX) { // different for bibtex and biblatex exporters  const note = [\u0026#39;annotation\u0026#39;, \u0026#39;note\u0026#39;].find(field =\u0026gt; reference.has[field]) if (note) { let notes = item.notes.map(note =\u0026gt; `\u0026lt;div\u0026gt;${note}\u0026lt;/div\u0026gt;`).join(\u0026#39;\u0026#39;) notes = notes .replace(/(\\$\\$[\\s\\S]*?\\$\\$)/g, \u0026#39;\u0026lt;script\u0026gt;$1\u0026lt;/script\u0026gt;\u0026#39;) .replace(/\\\\\\(/g, \u0026#39;\u0026lt;script\u0026gt;$\u0026#39;) .replace(/\\\\\\)/g, \u0026#39;$\u0026lt;/script\u0026gt;\u0026#39;) reference.add({ name: note, value: notes, html: true }); } } Replace director with author for videoRecording and film references Creator handling is fairly complicated, so to change the authors/editors/creators of any kind, you must change them on item and then call addCreators to do the needful. addCreators will replace the existing creators that were added to reference with the current state in item.creators, however you left it.\nif (Translator.BetterBibLaTeX) { switch (item.itemType) { case \u0026#39;videoRecording\u0026#39;: case \u0026#39;film\u0026#39;: for (const creator of item.creators) { if (creator.creatorType === \u0026#39;director\u0026#39;) creator.creatorType = \u0026#39;author\u0026#39; } reference.addCreators(); break; } } Changing the reference type from collection to book if (Translator.BetterBibLaTeX) { if (reference.referencetype === \u0026#39;collection\u0026#39;) reference.referencetype = \u0026#39;book\u0026#39; } Set the reference type to misc for arXiv preprints in BibTeX if (Translator.BetterBibTeX \u0026amp;\u0026amp; reference.referencetype === 'article' \u0026amp;\u0026amp; item.arXiv) { if (reference.has.journal \u0026amp;\u0026amp; item.arXiv.source === 'publicationTitle') { reference.remove('journal'); } if (!reference.has.journal) reference.referencetype = 'misc' } "
},
{
	"uri": "/zotero-better-bibtex/support/translations/",
	"title": "Translations",
	"tags": [],
	"description": "",
	"content": "BBT is currently available in English, German, French and Brazilian Portuguese. You can help out by adding new translations or fixing existing ones on Crowdin.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/extra-fields/",
	"title": "Extra fields",
	"tags": [],
	"description": "",
	"content": "In some cases the Zotero fields do not offer a place to enter the data you need to get your references just right. For this Zotero has a so-called \u0026ldquo;cheater syntax\u0026rdquo; which allows you to add extra \u0026ldquo;fields\u0026rdquo; as separate lines in the extra field all items in Zotero have. These fields are supported by the citation processor inside Zotero, and BBT understands them too, and adds one \u0026ldquo;cheater syntax of its own.\nYou can add such fields by adding each on their own line in the following format:\nLabel: value or the older format you migh have seen, which is supported but considered depracated:\n{:csl-variable: value} The full list of labels and the Zotero/CSL variables they translate to can be found in the table at the end.\nThese extra-fields are available to postscripts as item.extraField.kv.\u0026lt;variable-name\u0026gt;. Which variable it is depends (sorry):\n when you export to CSL, it is attempted to map it to the corrsponding CSL fields; if none are available, it is available under their zotero name when you export to Better BibTeX/Better BibLaTeX, it is attempted to map it to the corresponding zotero fields; if none are available, it is available under their csl variable name  There\u0026rsquo;s three type of fields:\n text date name  Text is just that. For dates, BBT will do its darndest to parse the crazy dates so many people seem intent in using but if you want consistent results, stick to YYYY-MM-DD. For names, use either just text (equivalent to a single-part name in Zotero), or \u0026lt;family name\u0026gt; || \u0026lt;given name\u0026gt;.\nBBT-specific There is also a BBT-specific extra-field format that looks like\ntex.field: value These fields are simply copied to the output by BBT, so if you have\ntex.bestfield: philosophy you will end up with\nbestfield = {philosophy} in the written bib(la)tex.\nYou can make BBT export the field only for bibtex or biblatex by changing the prefix to bibtex. (so bibtex.bestfield:) or biblatex. respectively. Finally, you can use = instead of : as a delimiter, and that will indicate to BBT that what follows the = is \u0026ldquo;raw LaTeX\u0026rdquo;; BBT will not do any escaping and just copy it out unchanged. This means, for example, that you would probably want\ntex.corp: Black \u0026amp; Decker tex.formula= $\\sum\\limits_{i=1}^{n} -p(m_{i})\\log_{2}(p(m_{i}))$ and not\ntex.corp= Black \u0026amp; Decker tex.formula: $\\sum\\limits_{i=1}^{n} -p(m_{i})\\log_{2}(p(m_{i}))$ It is important to note that these BBT-specific fields are not recognized by any other exporter. They might end up in notes for some other exporters; there\u0026rsquo;s nothing I can do about that.\nLabel/variable list note: I list the Zotero fields here, not the bibtex fields. The Zotero fields are translated to bibtex fields but that translation is pretty complicated and I don\u0026rsquo;t have a simple description of it at this time.\n   label type zotero/jurism csl     access date date accessDate accessed   admin flag text adminFlagÂ¹ admin-flagÂ¹   adoption date date adoptionDateÂ¹    application number text applicationNumber    archive collection text archiveCollectionÂ¹ archive_collectionÂ¹   archive location text archiveLocation archive_location   archive place text  archive-place   artwork medium text medium    artwork size text artworkSize    assembly number text assemblyNumberÂ¹ / seriesNumber    attorney agent name attorneyAgent attorneyAgent   audio file type text medium    audio recording format text medium    bill number text number number   blog title text publicationTitle    book abbreviation text journalAbbreviation container-title-short   book author name bookAuthor container-author   book title text publicationTitle    call number text callNumber call-number   case name text title title   cast member name castMember castMember   chapter number text session chapter-number   code number text codeNumber    code pages text pages page   code volume text volume    collection editor name seriesEditor collection-editor   collection number text assemblyNumberÂ¹ / regnalYearÂ¹ / seriesNumber / yearAsVolumeÂ¹ collection-number   collection title text parentTreatyÂ¹ / series / seriesTitle collection-title   conference date date conferenceDateÂ¹    conference name text conferenceName    container author name bookAuthor container-author   container title text code / publicationTitle / reporter container-title   container title short text journalAbbreviation container-title-short   csl type text  csl-type   date amended date dateAmendedÂ¹    date decided date date issued   date enacted date date issued   dictionary title text publicationTitle    docket number text number number   document name text documentNameÂ¹ document-nameÂ¹   document number text documentNumberÂ¹ / number document-numberÂ¹   editorial director name  editorial-director   encyclopedia title text publicationTitle    episode number text number number   event date date conferenceDateÂ¹ / dateAmendedÂ¹ / signingDateÂ¹ event-date   event place text  event-place   filing date date filingDate submitted   first page text pages page   forum title text publicationTitle    gazette flag text gazetteFlagÂ¹ gazette-flagÂ¹   interview medium text medium    issue date date date issued   issuing authority text issuingAuthority    journal abbreviation text journalAbbreviation container-title-short   legal status text legalStatus    legislative body text legislativeBody    letter type text type    library catalog text libraryCatalog source   manuscript type text type    map type text type    meeting name text meetingName    meeting number text meetingNumberÂ¹    name of act text title title   news case date date newsCaseDateÂ¹    num pages text numPages number-of-pages   number of pages text numPages number-of-pages   number of volumes text numberOfVolumes number-of-volumes   opening date date openingDateÂ¹ opening-dateÂ¹   original author name  original-author   original date date originalDateÂ¹ original-date   original publisher text  original-publisher   original publisher place text  original-publisher-place   original title text  original-title   parent treaty text parentTreatyÂ¹    patent number text number number   post type text type    presentation type text type    priority date date priorityDateÂ¹    priority numbers text priorityNumbers    proceedings title text publicationTitle    program title text publicationTitle    programming language text programmingLanguage    public law number text number number   publication date date publicationDateÂ¹ publication-dateÂ¹   publication number text publicationNumberÂ¹ publication-numberÂ¹   publication title text publicationTitle    publisher place text  publisher-place   regnal year text regnalYearÂ¹    regulation type text regulationTypeÂ¹ / type    regulatory body text legislativeBody / regulatoryBodyÂ¹    report number text number number   report type text type    reporter volume text volume    resolution label text resolutionLabelÂ¹    reviewed author name reviewedAuthor reviewed-author   reviewed title text  reviewed-title   running time text runningTime    series editor name seriesEditor collection-editor   series number text seriesNumber    series text text seriesText    series title text seriesTitle    session type text sessionTypeÂ¹ / type    short title text shortTitle title-short   signing date date signingDateÂ¹    supplement name text supplementNameÂ¹ supplementÂ¹   testimony by name testimonyByÂ¹ testimonyByÂ¹   thesis type text type    title short text shortTitle title-short   treaty number text number number   version number text versionNumber version   video recording format text medium    volume title text volumeTitleÂ¹ volume-titleÂ¹   website title text publicationTitle    website type text type    words by name wordsBy wordsBy   year as volume text yearAsVolumeÂ¹     Â¹ only supported in Juris-M\n"
},
{
	"uri": "/zotero-better-bibtex/support/tests/",
	"title": "Running the BBT test suite",
	"tags": [],
	"description": "",
	"content": "Please DO NOT DO THIS without an open issue on the github tracker. I\u0026rsquo;ve been running tests this way for years, but I\u0026rsquo;d still prefer to guide you through this to prevent any risks to your citation library. The test suite has only been tested on MacOS and Linux. I doubt it\u0026rsquo;ll run on Windows, and I don\u0026rsquo;t know what will go wrong when you test. If you\u0026rsquo;re on Windows, DO NOT run this on the same account that holds your actual Zotero library.\nThe tests require an installed Zotero, python 3.6+, and node 12+, a working gcc, and libgit. On MacOS, that requires:\n brew install libgit2 if xcode-select -p doesn\u0026rsquo;t respond with /Applications/Xcode.app/Contents/Developer: xcode-select --install (select install, not get Xcode in the popup that follows).  Then:\n git clone https://github.com/retorquere/zotero-better-bibtex.git cd zotero-better-bibtex pip3 install -r requirements.txt  then a few things I\u0026rsquo;d really prefer you do before anything else. In principle the tests are safe to run on the user account that also has your own library. I\u0026rsquo;ve been doing this for years. Still, it would be good to verify rather than trust this. The next steps are all reversible if things don\u0026rsquo;t go as expected.\n Make sure Zotero is not running. If you\u0026rsquo;re on a Mac, that means cmd-Q copy the Zotero profiles to a safe place. The profiles live in ~/Library/Application\\ Support/Zotero if you\u0026rsquo;re on a Mac, ~/.zotero if you\u0026rsquo;re on Linux. mv ~/Zotero ~/Zotero.saved touch ~/Zotero  this is all temporary, and when all is verified to be setup correctly, we\u0026rsquo;ll undo them.\n~/Library/Application\\ Support/Zotero / ~/.zotero holds the administration of your Zotero profiles. The test setup will add a new profile leaving your existing profile(s) untouched. But better safe than sorry, which is why we\u0026rsquo;re holding a copy.\nThe mv sets aside your library so that Zotero won\u0026rsquo;t be able to find it. The touch creates an empty file in its place. The tests don\u0026rsquo;t use that location, they use ~/.BBTZ5TEST instead, but if for whatever reason that doesn\u0026rsquo;t work, Zotero will try to write to ~/Zotero/something, and since ~/Zotero is now a file instead of a directory, Zotero will complain loudly if that happens, and we know we must back out.\nNow then:\n make sure you\u0026rsquo;re in zotero-better-bibtex ./test/behave --tags @438  and be amazed. Zotero will pop up, load the test library, executes one test, and shuts down. The log file after the tests run will be ~/.BBTZ5TEST.log. The tests do not touch your own library.\nTo restore access to your regular library so you can run either a test suite or just work with your library (but not both at the same time. always fully close Zotero between these).\n rm ~/Zotero mv ~/Zotero.saved ~/Zotero  and you can remove the copy of the profile administration you made earlier. Zotero should now start again normally opening your library.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/advanced/",
	"title": "Advanced",
	"tags": [],
	"description": "",
	"content": "You are a hardcore LaTeX user If you\u0026rsquo;d really just rather hand-code your LaTeX constructs, BBT makes that possible:\n You can add literal LaTeX anywhere in your reference by surrounding it with \u0026lt;script\u0026gt;...\u0026lt;/script\u0026gt; (\u0026lt;pre\u0026gt;...\u0026lt;/pre\u0026gt; will also work for historical reasons) markers. BBT will convert to/from unicode and (un)escape where required but will pass whatever is enclosed in the pre tags unchanged. An entry tagged with #LaTeX (case-sensitive!) will have all fields exported as if they\u0026rsquo;re wrapped in \u0026lt;script\u0026gt;...\u0026lt;/script\u0026gt;, so you can include LaTeX markup in your references.  Recognizing initials in names In names, you can force first names like Philippe to be exported to {\\relax Ph}ilippe (which causes it to get initial Ph. rather than P. in styles that do initials) by adding a end of guarded area character between Ph and ilippe.\n"
},
{
	"uri": "/zotero-better-bibtex/installation/preferences/",
	"title": "Configuration",
	"tags": ["configuration", "cache"],
	"description": "",
	"content": "The Better BibTeX Configuration can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo;.\nThe configuration of Better BibTeX is a little baroque compared to the standard Zotero Bib(La)TeX exporters (which only have hidden preferences). The defaults should just work, but here\u0026rsquo;s an attempt to describe what they do.\nMaking any change here will drop your entire export cache. This is usually not a problem unless you have a really large library, but you can read about what is involved here.\n"
},
{
	"uri": "/zotero-better-bibtex/installation/preferences/citation-keys/",
	"title": "Citation keys",
	"tags": ["citation keys", "configuration", "preferences"],
	"description": "",
	"content": "The Better BibTeX Configuration can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo;.\nThe configuration of Better BibTeX is a little baroque compared to the standard Zotero Bib(La)TeX exporters (which only have hidden preferences). The defaults should just work, but here\u0026rsquo;s an attempt to describe what they do.\nMaking any change here will drop your entire export cache. This is usually not a problem unless you have a really large library, but you can read about what is involved here.\nCitation keys Citation key format default: â€‹[auth:lower][shorttitle3_3][year]\nSet the pattern used to generate citation keys. The format of the keys is documented here.\nForce citation key to plain text default: yes\nIf you have deviated from the default citation key format pattern by specifying your own, you may wind up with non-ASCII characters in your citation keys. You can prevent that using the fold function at the appropriate place in your pattern, but checking this checkbox will just apply fold to all your keys.\nKeeping citation keys unique Keep keys unique default: within each library\nAuto-generated (non-pinned) keys automatically get a postfix when they would generate a duplicate. By default, the check for duplicates is restricted to the library/group the item lives in. When set to global, the check will include all libraries/groups, so auto-generated keys would be globally unique. Changing this setting does not affect existign keys - for this you would need to select the items and refresh the keys.\nOptions:\n across all libraries within each library  On conflict with a pinned key, non-pinned keys will be default: kept (causes key duplicates)\nThis determines what happens if you pin a key to a value that is already in use in a different reference but not pinned there. Neither are ideal, you just get to pick your poison. If you let BBT change the non-pinned key by adding a postfix character, the citation key changes which could be problematic for existing papers. If you keep the non-pinned key as-is, your library now has duplicate keys.\nOptions:\n postfixed (causes key changes) kept (causes key duplicates)  Quick copy/drag-and-drop citations QuickCopy format default: LaTeX\nUsed for drag-and-drop/quick copy using Better BibTeX citekeys. In the Zotero \u0026ldquo;Export\u0026rdquo; pane, choose Better BibTeX Quick Copy as the default export format for quick copy, and choose the desired format for the drag-and-drop citations here.\nOptions:\n LaTeX Cite Keys Pandoc Org-mode citekey select link Org-mode Zotero select link org-ref RTF Scan Roam Cite Key Atom (https://atom.io/packages/zotero-citations) GitBook Citekey select link Zotero select link  LaTeX command default: cite\nUsed for drag-and-drop/quick copy citations in LaTeX format. Set the desired LaTeX citation command here. If you set this to citep, drag-and-drop citations will yield \\citep{key1,key2,...}\nSurround Pandoc citations with brackets default: no\nUsed for drag-and-drop/quick copy citations in Pandoc format. You can use this option to select whether you want to have these pandoc citations surrounded with brackets or not.\nBibTeX AUX scanner When scanning an AUX file, attempt to import references from the attached bib file when their citation keys are not in Zotero default: no\nBy default, when scanning for cited items in the aux file, BBT will just generate a note listing all citation keys it cannot find in Zotero. When this option is turned on, BBT will attempt to import such missing items from the bib file that the AUX file being scanned points to.\n"
},
{
	"uri": "/zotero-better-bibtex/installation/preferences/export/",
	"title": "Export",
	"tags": ["automatic export", "configuration", "export", "preferences"],
	"description": "",
	"content": "The Better BibTeX Configuration can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo;.\nThe configuration of Better BibTeX is a little baroque compared to the standard Zotero Bib(La)TeX exporters (which only have hidden preferences). The defaults should just work, but here\u0026rsquo;s an attempt to describe what they do.\nMaking any change here will drop your entire export cache. This is usually not a problem unless you have a really large library, but you can read about what is involved here.\nBibTeX Export unicode as plain-text latex commands (recommended) default: yes\nBibTeX has really spotty Unicode support, so you generally want this on. It will translate things like accented characters to their equivalent LaTeX constructs on export.\nDisregard name prefixes when sorting default: no\nName handling is a lot more complex than I had ever thought it to be. A lot more complex. BibTeX has really limited ways of dealing with names with particles (van, von, de, etc). If you turn this on, BBT will add code to have van Gogh sorted under Gogh.\nAdd URLs to BibTeX export default: no\nMost BibTeX styles do not support DOI/URL fields. Of the styles that do support them, many forget to load the required \u0026lsquo;url\u0026rsquo; package, so make sure to load it yourself. DOI and URL fields are so-called \u0026lsquo;verbatim\u0026rsquo; fields, and without the \u0026lsquo;url\u0026rsquo; package loaded compilation will likely fail.\nOptions:\n no in the \u0026lsquo;note\u0026rsquo; field in the \u0026lsquo;note\u0026rsquo; field, but assuming the \u0026lsquo;url\u0026rsquo; package is not loaded in the \u0026lsquo;url\u0026rsquo; field in the \u0026lsquo;url\u0026rsquo; field, but assuming the \u0026lsquo;url\u0026rsquo; package is not loaded  BibLaTeX Export unicode as plain-text latex commands default: no\nBibLaTeX actually has really good Unicode support, so you generally want this off. But for some geezers such as me it is simply more pleasing to have things like accented characters translated to their equivalent LaTeX constructs on export.\nUse BibLaTeX extended name format (requires biblatex 3.5) default: no\nUse the extended biber 2.7 format for names with particles - only works in BibLaTeX 3.5 or later. This biblatex has a new (less ambiguous) way to store creator names. It\u0026rsquo;s technically superior, but the LaTeX world moves slowly, so many people won\u0026rsquo;t have it yet. But if you\u0026rsquo;re an early adopter, you can enable it here\nFields When a reference has both a DOI and a URL, export default: both\nDoes what it says on the tin, really. If a reference has both a DOI and an URL, you can choose to have them both exported, or either one of them. Note that for BibTeX, you must load the url package when you have doi or url fields. doi and url fields are so-called verbatim fields with different escaping rules, and BibTeX compilation will likely error out without the package loaded.\nOptions:\n both DOI URL  Fields to omit from export (comma-separated) default: \u0026lt;not set\u0026gt;\nIf there are some fields you don\u0026rsquo;t want in your bibtex files (such as note for example), add a list of them here, separated by comma\u0026rsquo;s.\nInclude JabRef-specific metadata: default: no\nExport JabRef-specific fields: timestamps, titles for attachments, and groups for each collection an item is part of. Note that having this on will disable caching in exports, which is really undesirable specifically for auto-exports.\nOptions:\n no for JabRef 3 for JabRef 4 for JabRef 5  Miscellaneous Automatically abbreviate journal title if none is set explicitly default: no\nIf set, generates journal abbreviations on export using the Zotero journal abbreviator, according to the abbreviation style selected in the list below the checkbox.\nAbbreviation style: default: \u0026lt;not set\u0026gt;\nSelect the style for auto-abbreviation. Only applicable to Juris-M; in Zotero, the style for automatic abbreviation is not configurable.\nInclude comments about potential problems with the references default: no\nGenerate quality reports for exported references. These show up only in BibTeX and BibLaTeX report formats and indicate things like missing required fields and duplicate citation keys.\nInclude automatic tags in export default: yes\nSome importers or Zotero extensions (such as the ShortDOI manager for example) create tags on items that are more for item management than that they are descriptive of the item. When this is off, such tags will not be included in the export.\nWhen converting to plain-text latex commands: default: Minimize the number of switches between math-mode and text-mode\nWhen a unicode character can be exported as either a math-mode or text-mode command, map to:\n minimal-packages: if both a math-mode and a text-mode mapping is available, use the version that does not require extra packages to be loaded. * conservative: if both a math-mode and a text-mode mapping is available, stay in the mode of the previously mapped character if possible. This minimizes the number of generated $s in the output. * text: if both a math-mode and a text-mode mapping is available, prefer text. * math: if both a math-mode and a text-mode mapping is available, prefer math.  Options:\n Minimize additional latex packages required Minimize the number of switches between math-mode and text-mode Prefer text-mode replacements Prefer math-mode replacements  Automatic export default: On Change\nDetermines when automatic exports are kicked off. Having it disabled still marks auto-exports as needing updates, so when you re-enable it, those exports will start. On-change means exports happen whenever a reference in the export changes/is added/is removed. On idle does more or less what Disabled (that is, no exports but mark as needing changes), but will kick off exports when your computer is idle. You mostly want this if your computer is performance-constrained (aka slow).\nOptions:\n Disabled On Change When Idle  "
},
{
	"uri": "/zotero-better-bibtex/installation/preferences/advanced/",
	"title": "Advanced",
	"tags": ["configuration", "preferences"],
	"description": "",
	"content": "The Better BibTeX Configuration can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo;.\nThe configuration of Better BibTeX is a little baroque compared to the standard Zotero Bib(La)TeX exporters (which only have hidden preferences). The defaults should just work, but here\u0026rsquo;s an attempt to describe what they do.\nMaking any change here will drop your entire export cache. This is usually not a problem unless you have a really large library, but you can read about what is involved here.\npostscript default: \u0026lt;not set\u0026gt;\nSnippet of javascript to run after each reference generation.\n@string definitions default: \u0026lt;not set\u0026gt;\nIf you have externally maintained @string vars paste them here and they will be resolved for subsequent imports. These should be entered as @string declarations, such as @string{IEEE_J_PWRE = \u0026quot;{IEEE} Transactions on Power Electronics\u0026quot;}, not just the var name.\nExport Apply title-casing to titles default: yes\nIf you\u0026rsquo;re dead-set on ignoring both BibTeX/BibLaTeX best practice (see the BBT FAQ) and the Zotero recommendations on title/sentence casing, you can turn this off to suppress title casing for English references\nApply case-protection to capitalized words by enclosing them in braces default: yes\nIf you\u0026rsquo;re dead-set on ignoring both BibTeX/BibLaTeX best practice (see the BBT FAQ) and the Zotero recommendations on title/sentence casing, you can turn this off to suppress automatic brace-protection for words with uppercase letters.\nRetain export cache across upgrades default: no\nBy default, BBT clears all caches whenever BBT or Zotero is upgraded. I can\u0026rsquo;t realistically predict whether a change in Zotero or BBT is going to affect the output generated for any given item, so to be sure you always have the latest export-affecting fixes, the caches are discarded when a new version of either is detected. If you have a very large library however, of which you regularly export significant portions, you might want to retain the cached items even if that does come with the risk that you get wrong output on export that has been fixed in the interim.\nIf you have this on, and you experience any problem that is not the cache getting dropped on upgrade, you must clear the cache and reproduce the problem. When you change this setting, as with any setting change, the cache will be dropped.\nParallel background exports: default: 1\nBBT can now perform its exports in a separate thread, and should no longer block Zotero\u0026rsquo;s UI pretty much regardless of how large your library is. While it\u0026rsquo;s been tested and seems to work well, I still consider it to be experimental at this stage. You can turn it off by setting this value to 0 and get the old (blocking) behavior back.\nImport Sentence-case titles on import: default: yes, but try to exclude already-sentence-cased titles\nBib(La)TeX references ought to be stored in Title Case; Zotero references are expected to be entered as sentence-case.\nWith this option on, BBT will try to sentence-case during import. This sentence-casing uses heuristics, no natural language processing is performed, and the results are not perfect.\nYou can turn this off, but you may then also want to disable Apply title-casing to titles (which has its own problems, see the help entry for that option on this page). With \u0026lsquo;yes, but try to exclude already-sentence-cased titles\u0026rsquo;, BBT will attempt to detect titles that are already sentence cased and leave them as-is on import.\nOptions:\n yes, but try to exclude already-sentence-cased titles yes no (import titles as-is)  Insert case-protection for braces: default: minimal\nOn import, BBT will add case-protection (\u0026hellip;) to titles that have words in {Braces}.\nThere\u0026rsquo;s plenty of bib(la)tex files out there that do this a little overzealously, and you may not like the resulting HTML code in your items, even though this is what the braces mean in bib(la)tex, and Zotero supports it.\nIf you turn this off, the markup is omitted during import. When you select \u0026lsquo;yes\u0026rsquo;, all braces that bib(la)tex would interpret as case protection (which is not all of them) are converted to span elements. In minimal mode, the number of span elements is minimized.\nOptions:\n minimal yes no  @string definitions Expand the @string vars below during imports default: yes\nWhen enabled, BBT will prepend the @strings section below to all Bib(La)TeX imports and will expand the strings during export.\nIf a field could be a @string reference, export it as an unbraced @string reference default: No\nWhen enabled, BBT will try to retain @string vars its exports unsurrounded by braces; when set to \u0026lsquo;detect\u0026rsquo;, single-word strings will be assumed to be externally-defined @string vars, when set to \u0026lsquo;match\u0026rsquo;, only @strings declared in the @strings section of the preferences will be preserved. If you don\u0026rsquo;t know what this means, leave it off.\nOptions:\n No Assume single-word fields to be @string vars Match against the @string declarations below Match against the @string declarations and their values below  Citation keys Warn me when changing citation keys in bulk default: 10\nFor those who are curious about what the Clear/Generate BibTeX key right-click options do, this will warn you if you are doing this on more than 10 (default) at the same time, to prevent your curiosity from changing all your citation keys at once.\n"
},
{
	"uri": "/zotero-better-bibtex/exporting/json-rpc/",
	"title": "JSON-RPC",
	"tags": [],
	"description": "",
	"content": "You can call into BBT using JSON-RPC on the URL http://localhost:23119/better-bibtex/json-rpc . An example could look like:\ncurl http://localhost:23119/better-bibtex/json-rpc -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; --data-binary \u0026#39;{\u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;collection.scanAUX\u0026#34;, \u0026#34;params\u0026#34;: [\u0026#34;/My Library/thesis/article1\u0026#34;, \u0026#34;/Users/phantom/Downloads/output.aux\u0026#34;] }\u0026#39; The available methods are:\nautoexport.add(collection, translator, path, displayOptions, replace) Add an auto-export for the given collection. The target collection will be created if it does not exist\n collection: The forward-slash separated path to the collection. The first part of the path must be the library name, or empty (//); empty is your personal library. Intermediate collections that do not exist will be created as needed. translator: The name or GUID of a BBT translator path: The absolute path to which the collection will be auto-exported displayOptions: Options which you would be able to select during an interactive export; exportNotes, default false, and useJournalAbbreviation, default false replace: Replace the auto-export if it exists, default false  returns: Collection ID of the target collection\ncollection.scanAUX(collection, aux) Scan an AUX file for citekeys and populate a Zotero collection from them. The target collection will be cleared if it exists.\n collection: The forward-slash separated path to the collection. The first part of the path must be the library name, or empty (//); empty is your personal library. Intermediate collections that do not exist will be created as needed. aux: The absolute path to the AUX file on disk  item.attachments(citekey) List attachments for an item with the given citekey\n citekey: The citekey to search for  item.bibliography(citekeys, format) Generate a bibliography for the given citekeys\n citekeys: An array of citekeys format: A specification of how the bibliography should be formatted  returns: A formatted bibliography\nitem.citationkey(item_keys) Fetch citationkeys given item keys\n item_keys: A list of [libraryID]:[itemKey] strings. If [libraryID] is omitted, assume \u0026lsquo;My Library\u0026rsquo;  item.export(citekeys, translator, libraryID) Generate an export for a list of citekeys\n citekeys: Array of citekeys translator: BBT translator name or GUID libraryID: ID of library to select the items from. When omitted, assume \u0026lsquo;My Library\u0026rsquo;  item.notes(citekeys) Fetch the notes for a range of citekeys\n citekeys: An array of citekeys  item.search(searchterms) Quick-search for items in Zotero.\n searchterms: Terms as typed into the search box in Zotero  user.groups() List the libraries (also known as groups) the user has in Zotero\n"
},
{
	"uri": "/zotero-better-bibtex/installation/preferences/hidden-preferences/",
	"title": "Hidden preferences",
	"tags": ["configuration", "preferences"],
	"description": "",
	"content": "The Better BibTeX Configuration can be found under the regular Zotero preferences pane, tab \u0026lsquo;Better BibTeX\u0026rsquo;.\nThe configuration of Better BibTeX is a little baroque compared to the standard Zotero Bib(La)TeX exporters (which only have hidden preferences). The defaults should just work, but here\u0026rsquo;s an attempt to describe what they do.\nMaking any change here will drop your entire export cache. This is usually not a problem unless you have a really large library, but you can read about what is involved here.\nThe following settings are not exposed in the UI, but can be found under Preferences/Advanced/Config editor.\nAll are prefixed with extensions.zotero.translators.better-bibtex in the table you will find there\nascii default: \u0026lt;not set\u0026gt;\nIf you have unicode turned on you can still selectively replace some characters to plain-text commands; any characters entered here will always be replaced by their LaTeX-command counterparts.\nautoExportDelay default: 1\nIf you have auto-exports set up, BBT will wait this many seconds before actually kicking off the exports to buffer multiple changes in quick succession setting off an unreasonable number of auto-exports. Minimum is 1 second. Changes to this preference take effect after restarting Zotero.\nautoExportIdleWait default: 10\nNumber of seconds to wait after your system goes idle before kicking off auto-exports.\nautoPinDelay default: 0\nWhen \u0026gt; 0, BBT will automatically pin the first citekey it generates for an item after this many seconds.\nbiblatexExtendedDateFormat default: yes\nSupport for EDTF dates in biblatex\ncacheFlushInterval default: 5\nHow often the Better BibTeX database should be saved to disk. Defaults to once every 5 seconds. Note that your database is always saved when your computer goes idle, or when you exit Zotero.\nciteprocNoteCitekey default: no\nReplaces the \u0026ldquo;note\u0026rdquo; field with the bibtex key during citation rendering in Word/Libreoffice. Main use-case is to help migrating word documents to pandoc. This setting only takes effect during startup, so if you change it, you will have to restart Zotero to have this take effect (or to disable it. Please disable it when done). You will want to use a custom CSL style (such as this) to make this work.\ncsquotes default: \u0026lt;not set\u0026gt;\nif you set csquotes to a string of character pairs, each pair will be assumed to be the open and close parts of a pair and will be replaced with a \\\\enquote{...} construct.\ngit default: config\nCan be off, config or always\nimport default: yes\nUse BBTs importer instead of Zotero\u0026rsquo;s importer\nimportCitationKey default: yes\nOn import, assign the existing citation key to the item being imported\nimportExtra default: yes\nOn import, place all bib(la)tex field Zotero doesn\u0026rsquo;t have an existing field for in the Zotero extra field of the item\nimportUnknownTexCommand default: ignore\nWhat to do when encountering a TeX command the parser does not know about. Please only use values:\n ignore: ignore the command entirely * tex: import and mark as TeX code, so on re-export it will be output as-is * text: import without marking it as TeX code, so on re-export it will be treated as regular text  itemObserverDelay default: 5\nI\u0026rsquo;ve had reports where Zotero notifies extensions that references have changed, but if BBT then actually retrieves those same references, Zotero complains they \u0026ldquo;haven\u0026rsquo;t been saved yet\u0026rdquo;. Super. This preference sets the number of microseconds BBT should wait after being notified before acting on the changed references.\nkuroshiro default: no\nWhen on, BBT will load kuroshiro for romajization in citekeys. This uses a lot of memory, easily 100MB. If you don\u0026rsquo;t have Japanese titles/names, keep this off.\nmapMath default: \u0026lt;not set\u0026gt;\nAny characters entered here will prefer a math-mode LaTeX-command counterpart over a math-mode, if a math-mode command is available. Only useful when mapUnicode is conservative.\nmapText default: \u0026lt;not set\u0026gt;\nAny characters entered here will prefer a text-mode LaTeX-command counterpart over a math-mode, if a text-mode command is available. Only useful when mapUnicode is conservative. Characters specified in mapMath take presedence over characters specified in mapText.\nnewTranslatorsAskRestart default: yes\nNew translators installed in Zotero are not immediately usuable for drag-and-drop. If you want to use BBT for drag-and-drop (e.g. to drag and drop citekeys or citations), you will be asked whether you want to restart after installation, or whether you want to reinstall when it is more convenient to you. You will be asked this whenever the BBT translators update, but you can disable this by checking \u0026ldquo;Do not ask again\u0026rdquo; in that dialog.\nparseParticles default: yes\nName particle handling. Only turn on when requested and we\u0026rsquo;re talking about it on github.\npostscriptOverride default: \u0026lt;not set\u0026gt;\nYou can use a custom postscript per export directory:\n Edit the hidden preference postscriptOverride, and set it to a filename like postscript.js 2. In the directory where you intend to export to, create a file called postscript.js (or whatever you set the preference to) and add the postscript you want there 3. Export to that directory.  A postscript override will disable caching for that export.\nrawImports default: no\nWhen you set this on, BBT will import bib files leaving any LaTeX commands as-is, and add the #LaTeX tag for raw re-exports.\nrawLaTag default: #LaTeX\nWhen an item has this tag, all its fields will be assumed to hold raw LaTeX and will undergo no further transformation. If you set this to *, all items will be assumed to have raw LaTeX.\nrelativeFilePaths default: no\nWhen exporting a Bib(La)TeX file, if the attachments are stored anywhere under the directory the bibliography is exported to, use relative paths to those attachments. Caching is disabled when this option is on, so it affects performance.\nskipWords default: a,ab,aboard,about,above,across,after,against,al,along,amid,among,an,and,anti,around,as,at,before,behind,below,beneath,beside,besides,between,beyond,but,by,d,da,das,de,del,dell,dello,dei,degli,della,dell,delle,dem,den,der,des,despite,die,do,down,du,during,ein,eine,einem,einen,einer,eines,el,en,et,except,for,from,gli,i,il,in,inside,into,is,l,la,las,le,les,like,lo,los,near,nor,of,off,on,onto,or,over,past,per,plus,round,save,since,so,some,sur,than,the,through,to,toward,towards,un,una,unas,under,underneath,une,unlike,uno,unos,until,up,upon,versus,via,von,while,with,within,without,yet,zu,zum\nlist of words to skip in title when generating citation keys\nverbatimFields default: url,doi,file,eprint,verba,verbb,verbc,groups\nlist of fields to treat as verbatim during import. If you\u0026rsquo;re importing e.g. Mendeley-generated BibTeX, try removing file from this list before import.\nwarnTitleCased default: no\nBoth Zotero and BBT expect titles to be in sentence-case, but a lot of sites offer import data that is Title Cased. When exporting these titles to bib(la)tex you\u0026rsquo;re going to get a lot of extra unwanted braces, because all these Title Cased words will look like proper nouns to BBTs own title-casing mechanism. When this setting is on, you will be warned when you import/save items in Zotero with titles that look like they\u0026rsquo;re Title Cased, so that you can inspect/correct them.\n"
},
{
	"uri": "/zotero-better-bibtex/installation/bundled-translators/",
	"title": "Bundled translators",
	"tags": ["export", "import"],
	"description": "Zotero import/export translators bundled with BBT",
	"content": "Better BibTeX bundles 5 translators you might care about:\nExport These translators are supported by the auto-export functionality built into Better BibTeX:\n Better BibLaTeX exports references in BibLaTeX format (but better, natch) Better BibTeX exports references in BibTeX format Better CSL JSON exports references in pandoc-compatible CSL-JSON format, with added citation keys and parsing of metadata Better CSL YAML exports the same as the Better CSL JSON exporter, but in YAML format Collected Notes exports just notes \u0026ndash; standalone notes and notes attached to references, not the extra field \u0026ndash; to HTML. This way, Zotero can serve as a (very) simple research notebook.  Import  Better BibTeX exports and imports references in Bib(La)TeX format  Included, but you should usually ignore it. I would hide these if I could. They\u0026rsquo;re used for Zotero\u0026rsquo;s drag-and-drop citation facility, and for Better BibTeX debugging.\n BetterBibTeX JSON exports and imports references in BetterBibTeX debug format. The error reporter uses this format Better BibTeX Quick Copy exports citations to be copy-pasted into your LaTeX/Markdown document in the form \\cite{\u0026lt; key \u0026gt;}/[@key]  "
},
{
	"uri": "/zotero-better-bibtex/tags/automatic-export/",
	"title": "automatic export",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/cache/",
	"title": "cache",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/citation-keys/",
	"title": "citation keys",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/cite-as-you-write/",
	"title": "cite as you write",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/configuration/",
	"title": "configuration",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/overleaf/",
	"title": "overleaf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/preferences/",
	"title": "preferences",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/tags/scripting/",
	"title": "scripting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zotero-better-bibtex/sponsoring/",
	"title": "Sponsoring BBT",
	"tags": [],
	"description": "",
	"content": "While the development needs of BBT are to a large extent covered by the generosity towards open-source developers of services such as github and travis, my development system does require the occasional upgrade; also, I enjoy getting the occasional frivolous tech-toy that I wouldn\u0026rsquo;t otherwise grant myself. While you should feel in no way obligated to pay for BBT, anything you can spare is very much appreciated. If you\u0026rsquo;d rather contribute a little bit each month (and a little means a lot) so I can save up for a replacement a year or so down the line, head on over to Patreon, but mind that Patreon takes a fairly large cut of what you give.\nMany, many thanks, also to the existing contributors \u0026ndash; thanks to you I\u0026rsquo;ve hit my first target and have been able to replace my trusty macbook air with a newer macbook pro which has much more breathing room.\n"
},
{
	"uri": "/zotero-better-bibtex/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]